openapi: 3.0.3
info:
  title: School CMS API
  description: |
    API 文件，涵蓋登入、註冊、Profile、文章 CRUD、留言 CRUD，留言支援按讚資訊

    ## Firebase Authentication
    應用程式也使用 Firebase Authentication 進行身份驗證：

    **Firebase Sign Up Endpoint:**
    - URL: `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${FIREBASE_API_KEY}`
    - Method: POST
    - Request Body: 參考 `FirebaseSignUpRequest` schema
    - Response: 參考 `FirebaseSignUpResponse` schema
  version: 1.3.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: 本地開發環境
  - url: https://api.schoolcms.com/v1
    description: 生產環境

tags:
  - name: Auth
    description: 使用者登入與驗證
  - name: Institutions
    description: 機構 CRUD 操作
  - name: Users
    description: 使用者註冊與個人資料管理
  - name: Posts
    description: 文章 CRUD 操作
  - name: Comments
    description: 留言 CRUD 與按讚功能

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: 使用者登入
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: 登入成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: 帳號或密碼錯誤

  /auth/register:
    post:
      tags: [Users]
      summary: 使用者註冊
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: 註冊成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/User"
        "400":
          description: 註冊失敗（如 Email 已被使用）

  /auth/user:
    get:
      tags: [Users]
      summary: 取得當前使用者 Profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 使用者資料
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/User"
        "401":
          description: 尚未登入
    put:
      tags: [Users]
      summary: 更新個人資料
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/User"
        "401":
          description: 尚未登入

  /institutions:
    get:
      tags: [Institutions]
      summary: 取得所有機構清單
      responses:
        "200":
          description: 機構清單
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/Institution"
        "401":
          description: 尚未登入

  /institutions/{InstitutionId}/posts:
    get:
      tags: [Posts]
      summary: 取得所有文章 (可依條件篩選，含有最新幾篇留言)
      parameters:
        # GET /posts?page=1&limit=6&keyword="永續"
        - $ref: "#/components/parameters/InstitutionId"
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: 頁碼
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          description: 每頁顯示數量
        - name: order
          in: query
          description: 排序方向
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: title
          in: query
          required: false
          schema:
            type: string
          description: 依標題篩選
        - name: startDate
          in: query
          description: 開始日期範圍（格式：YYYY-MM-DD）
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: 結束日期範圍（格式：YYYY-MM-DD）
          schema:
            type: string
            format: date
      responses:
        "200":
          description: 成功取得文章列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
    post:
      tags: [Posts]
      summary: 新增文章
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleInput"
      responses:
        "201":
          description: 文章建立成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  # content:
                  #   $ref: "#/components/schemas/Post"

  /institutions/{InstitutionId}/posts/own:
    get:
      tags: [Posts]
      summary: 取得自己的文章清單(可編輯)
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 自己的文章清單
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    type: array
                    items:
                      type: integer
                    example: ["1", "2", "13"]

  /institutions/{InstitutionId}/posts/{PostId}:
    get:
      tags: [Posts]
      summary: 取得單篇文章
      parameters:
        - $ref: "#/components/parameters/PostId"
      responses:
        "200":
          description: 單篇文章資料
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/Post"
        "404":
          description: 找不到文章
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
    put:
      tags: [Posts]
      summary: 更新文章
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PostId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleInput"
      responses:
        "200":
          description: 文章更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/Post"
        "404":
          description: 找不到文章
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
    delete:
      tags: [Posts]
      summary: 刪除文章
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PostId"
      responses:
        "200":
          description: 刪除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "404":
          description: 找不到文章
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false

  /institutions/{InstitutionId}/posts/{PostId}/comments:
    get:
      tags: [Comments]
      summary: 取得文章所有留言（包含 reactions 與 liked_by_user）
      parameters:
        - $ref: "#/components/parameters/InstitutionId"
        - $ref: "#/components/parameters/PostId"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 留言列表
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/Comment"
    post:
      tags: [Comments]
      summary: 新增留言
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/InstitutionId"
        - $ref: "#/components/parameters/PostId"
        - $ref: "#/components/parameters/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        "201":
          description: 留言建立成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/CommentWithLike"

  /institutions/{InstitutionId}/posts/{PostId}/comments/{CommentId}/like:
    post:
      tags: [Comments]
      summary: 對留言新增表情反應
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/InstitutionId"
        - $ref: "#/components/parameters/PostId"
        - $ref: "#/components/parameters/CommentId"
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: 新增表情反應成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/CommentWithLike"
    delete:
      tags: [Comments]
      summary: 取消對留言表情反應
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/InstitutionId"
        - $ref: "#/components/parameters/PostId"
        - $ref: "#/components/parameters/CommentId"
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: 取消表情反應成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  content:
                    $ref: "#/components/schemas/CommentWithoutLike"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: string
      description: 使用者 ID
    PostId:
      name: post_id
      in: path
      required: true
      schema:
        type: string
      description: 文章 ID
    CommentId:
      name: comment_id
      in: path
      required: true
      schema:
        type: string
      description: 留言 ID
    InstitutionId:
      name: institution_id
      in: path
      required: true
      schema:
        type: string
      description: 機構 ID

  responses:
    BadRequest:
      description: 請求參數錯誤
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            badRequest:
              value:
                success: false
                error:
                  code: "BAD_REQUEST"
                  message: "請求參數格式錯誤"
                  details: "無效的日期格式"

    Unauthorized:
      description: 未授權訪問
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            unauthorized:
              value:
                success: false
                error:
                  code: "UNAUTHORIZED"
                  message: "請先登入以訪問此資源"

    Forbidden:
      description: 禁止訪問
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            forbidden:
              value:
                success: false
                error:
                  code: "FORBIDDEN"
                  message: "您沒有權限執行此操作"

    NotFound:
      description: 資源不存在
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            notFound:
              value:
                success: false
                error:
                  code: "NOT_FOUND"
                  message: "找不到指定的資源"

    ValidationError:
      description: 資料驗證錯誤
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          examples:
            validation:
              value:
                success: false
                error:
                  code: "VALIDATION_ERROR"
                  message: "資料驗證失敗"
                  fields:
                    title: ["標題不能為空"]
                    startTime: ["開始時間必須晚於當前時間"]

    InternalServerError:
      description: 伺服器內部錯誤
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            serverError:
              value:
                success: false
                error:
                  code: "INTERNAL_SERVER_ERROR"
                  message: "伺服器內部錯誤，請稍後再試"

  schemas:
    # 統一回應格式
    SuccessResponse:
      type: object
      required: [success, content]
      properties:
        success:
          type: boolean
          example: true
          description: 操作是否成功
        content:
          description: 成功回應的資料內容
          type: object
        timestamp:
          type: string
          format: date-time
          description: 回應時間戳
          example: "1746028800"

    ErrorResponse:
      type: object
      required: [success, error]
      properties:
        success:
          type: boolean
          example: false
          description: 操作是否成功
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              description: 錯誤代碼
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: 錯誤訊息
              example: "資料驗證失敗"
            details:
              type: string
              description: 詳細錯誤說明
              example: "標題欄位不能為空"
        timestamp:
          type: string
          format: date-time
          description: 回應時間戳
          example: "1746028800"

    ValidationErrorResponse:
      type: object
      required: [success, error]
      properties:
        success:
          type: boolean
          example: false
          description: 操作是否成功
        error:
          type: object
          required: [code, message, fields]
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "資料驗證失敗"
            fields:
              type: object
              description: 欄位驗證錯誤詳情
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                title: ["標題不能為空", "標題長度必須介於 1-100 字元"]
                email: ["請輸入有效的電子郵件地址"]
        timestamp:
          type: string
          format: date-time
          description: 回應時間戳
          example: "1746028800"

    LoginRequest:
      type: object
      properties:
        id_token:
          type: string
          format: email
          example: eyJhbGciOiJIUzI1NiIsInR...
      required: [id_token]

    LoginContent:
      type: object
      properties:
        message:
          type: string
          example: 登入成功
        requires_token_refresh:
          type: boolean
          example: false
        user:
          type: object
          properties:
            id:
              type: string
              example: 1
            full_name:
              type: string
              example: 王小明
            email:
              type: string
              format: email
              example: user@example.com
            role:
              type: string
              example: admin
            institution_id:
              type: string
              example: 1
            permissions:
              type: array
              items:
                type: string
              example:
                [
                  "create_forum_posts",
                  "view_institutions",
                  "participate_activities",
                  "manage_own_activities",
                  "manage_institution_forum",
                  "manage_all_forum",
                  "view_analytics",
                  "manage_student_users",
                  "view_activities",
                  "view_forum",
                  "manage_all_content",
                  "view_users",
                  "system_admin",
                  "manage_institution_activities",
                  "manage_institution_content",
                  "manage_institutions",
                  "manage_own_content",
                  "manage_all_activities",
                  "manage_users",
                  "manage_own_institution",
                  "comment_forum_posts",
                  "manage_institution_users",
                  "view_content",
                ]

    RegisterRequest:
      type: object
      properties:
        id_token:
          type: string
          format: email
          example: eyJhbGciOiJIUzI1NiIsInR...
        full_name:
          type: string
          example: 王小明
        role:
          type: string
          example: admin
        institution_id:
          type: string
          example: 1
      required: [id_token, full_name, role, institution_id]

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: 王小明
        bio:
          type: string
          example: 我是彰化國小的學生
        avatar_url:
          type: string
          format: uri
          example: https://example.com/avatar.png

    Institution:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: 彰化國小
        region_code:
          type: string
          example: CH
        region_name:
          type: string
          example: 彰化縣

    User:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: 王小明
        email:
          type: string
          format: email
          example: user@example.com
        institution_id:
          type: string
          example: 1
        # bio:
        #   type: string
        #   example: 我是彰化國小的學生
        # avatar_url:
        #   type: string
        #   format: uri
        #   example: https://example.com/avatar.png
        created_at:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1757997600

    ArticleInput:
      type: object
      properties:
        title:
          type: string
          example: 校園永續活動
        time:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1752644400
        types:
          type: array
          items:
            type: integer
          example: [1, 4]
        img_url:
          type: string
          example: figure2.png
        intro:
          type: string
          example: 這是一篇關於永續發展的文章內容。
        content:
          type: string
          example: <p>這是一篇關於永續發展的文章內容，透過實際行動如何去影響原本的議題</p>。
      required: [title, content, types]

    Post:
      allOf:
        - $ref: "#/components/schemas/ArticleInput"
        - type: object
          properties:
            id:
              type: string
              example: 1
            user_id:
              type: string
              example: 10
            comment:
              $ref: "#/components/schemas/CommentBase"
            created_at:
              type: integer
              format: int64
              description: Unix timestamp
              example: 1757997600
            updated_at:
              type: integer
              format: int64
              description: Unix timestamp
              example: 1758001200

    CommentBase:
      type: object
      required: [content]
      properties:
        id:
          type: string
          example: "cmt_01"
        user_id:
          type: string
          example: "01"
        content:
          type: string
          minLength: 1
          maxLength: 2000
          description: 留言內容
          example: "<p>挑食狀況蠻明顯的</p>"
        created_at:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1757999400
        updated_at:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1758000000
      example:
        - id: cmt_01
          user_id: 01
          content: "<p>您是如何去發想的</p>"
          created_at: 1757999400
          # updated_at: 1758000000
        - id: cmt_02
          user_id: 02
          content: "<p>寫得很好，值得省思</p>"
          created_at: 1757999400
          # updated_at: 1758000000

    CommentInput:
      type: object
      properties:
        parent_id:
          type: string
          example: 1
        user_id:
          type: string
          example: 10
        comment:
          type: string
          example: 這是一則留言。
      required: [user_id, parent_id, comment]

    Comment:
      # type: object
      # properties:
      #   id:
      #     type: string
      #     example: cmt_101
      #   created_at:
      #     type: integer
      #     format: int64
      #     description: Unix timestamp
      #     example: 1757999400
      #   updated_at:
      #     type: integer
      #     format: int64
      #     description: Unix timestamp
      #     example: 1758000000
      #   user_id:
      #     type: string
      #     example: 10
      #   parent_id:
      #     type: string
      #     example: 1
      #   comment:
      #     type: array
      #     items:
      #       type: string
      #     example: [這是一則留言。, 留言二]
      # required: [comment]
      $ref: "#/components/schemas/CommentBase"

    CommentWithLike:
      allOf:
        - $ref: "#/components/schemas/Comment"
        - type: object
          properties:
            reactions:
              type: object
              properties:
                like:
                  type: integer
                  example: 3
                laugh:
                  type: integer
                  example: 2
            liked_by_user:
              type: string
              example: laugh

    CommentWithoutLike:
      allOf:
        - $ref: "#/components/schemas/Comment"
        - type: object
          properties:
            reactions:
              type: object
              properties:
                like:
                  type: integer
                  example: 3
                laugh:
                  type: integer
                  example: 1
            liked_by_user:
              type: string
              example: null

    FirebaseSignUpRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: test@sdgsjourney.com
        password:
          type: string
          format: password
          example: "123456"
        returnSecureToken:
          type: boolean
          example: true
      required: [email, password, returnSecureToken]

    FirebaseSignUpResponse:
      type: object
      properties:
        kind:
          type: string
          example: "identitytoolkit#SignupNewUserResponse"
        idToken:
          type: string
          description: Firebase ID Token
          example: "eyJhbGciOiJSUzI1NiIsImtpZCI6..."
        email:
          type: string
          format: email
          example: test@sdgsjourney.com
        refreshToken:
          type: string
          description: Firebase Refresh Token
          example: "AEu4IL2..."
        expiresIn:
          type: string
          example: "3600"
        localId:
          type: string
          description: Firebase User ID
          example: "abc123def456"
    FirebaseSignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: test@sdgsjourney.com
        password:
          type: string
          format: password
          example: "123456"
        returnSecureToken:
          type: boolean
          example: true
      required: [email, password, returnSecureToken]
    FirebaseSignInResponse:
      type: object
      properties:
        kind:
          type: string
          example: "identitytoolkit#SignupNewUserResponse"
        idToken:
          type: string
          description: Firebase ID Token
          example: "eyJhbGciOiJSUzI1NiIsImtpZCI6..."
        email:
          type: string
          format: email
          example: test@sdgsjourney.com
        refreshToken:
          type: string
          description: Firebase Refresh Token
          example: "AEu4IL2..."
        expiresIn:
          type: string
          example: "3600"
        localId:
          type: string
          description: Firebase User ID
          example: "abc123def456"
